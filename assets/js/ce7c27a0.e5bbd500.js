"use strict";(self.webpackChunktanstack_query_builder_website=self.webpackChunktanstack_query_builder_website||[]).push([[275],{3023:(e,s,n)=>{n.d(s,{R:()=>u,x:()=>a});var t=n(3696);const i={},r=t.createContext(i);function u(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:u(e.components),t.createElement(r.Provider,{value:s},e.children)}},8743:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>u,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api/query","title":"Query API","description":"After configuring the builder, you can use it inside your React components with the hooks exposed in this page.","source":"@site/docs/api/query.mdx","sourceDirName":"api","slug":"/api/query","permalink":"/tanstack-query-builder/api/query","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Query API","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Builder API","permalink":"/tanstack-query-builder/api/builder"},"next":{"title":"HTTP Options","permalink":"/tanstack-query-builder/api/http"}}');var i=n(2540),r=n(3023);const u={title:"Query API",sidebar_position:5},a=void 0,o={},l=[{value:"Query hooks",id:"query-hooks",level:2},{value:"useQuery",id:"usequery",level:3},{value:"useQueries",id:"usequeries",level:3},{value:"useInfiniteQuery",id:"useinfinitequery",level:3},{value:"useIsFetching",id:"useisfetching",level:3},{value:"Mutation hooks",id:"mutation-hooks",level:2},{value:"useMutation",id:"usemutation",level:3},{value:"useMutationState",id:"usemutationstate",level:3},{value:"useIsMutating",id:"useismutating",level:3},{value:"Utilities",id:"utilities",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"After configuring the builder, you can use it inside your React components with the hooks exposed in this page."}),"\n",(0,i.jsx)(s.p,{children:"The query builder provides a set of hooks similar to Tanstack Query itself. Each hook can be passed the variables for that builder, as well as the options object that is passed to the underlying Tanstack Query hook."}),"\n",(0,i.jsxs)(s.p,{children:["Tanstack Query normally provides a set of hooks for various use cases. These are ",(0,i.jsx)(s.code,{children:"useQuery"}),", ",(0,i.jsx)(s.code,{children:"useInfiniteQuery"}),", ",(0,i.jsx)(s.code,{children:"useMutation"}),", and ",(0,i.jsx)(s.code,{children:"useQueries"}),".\nThere are also some variants like ",(0,i.jsx)(s.code,{children:"useSuspenseQuery"})," and ",(0,i.jsx)(s.code,{children:"usePrefetchQuery"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"query-hooks",children:"Query hooks"}),"\n",(0,i.jsx)(s.h3,{id:"usequery",children:"useQuery"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"useQuery(vars, queryOptions): QueryResult;\n"})}),"\n",(0,i.jsxs)(s.p,{children:["There are also ",(0,i.jsx)(s.code,{children:"usePrefetchQuery"})," and ",(0,i.jsx)(s.code,{children:"useSuspenseQuery"})," variants."]}),"\n",(0,i.jsx)(s.h3,{id:"usequeries",children:"useQueries"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"useQueries(queries: Array<{ vars, options, mapKey }>, sharedVars, sharedOptions): QueriesResult;\n"})}),"\n",(0,i.jsxs)(s.p,{children:["There is also ",(0,i.jsx)(s.code,{children:"useSuspenseQueries"})," variant."]}),"\n",(0,i.jsx)(s.h3,{id:"useinfinitequery",children:"useInfiniteQuery"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"useInfiniteQuery(vars, queryOptions): InfiniteQueryResult;\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Infinite query methods are only available if you have configured the builder with ",(0,i.jsx)(s.a,{href:"./builder#withpagination",children:(0,i.jsx)(s.code,{children:"withPagination"})}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["There are also ",(0,i.jsx)(s.code,{children:"usePrefetchInfiniteQuery"})," and ",(0,i.jsx)(s.code,{children:"useSuspenseInfiniteQuery"})," variants."]}),"\n",(0,i.jsx)(s.h3,{id:"useisfetching",children:"useIsFetching"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"useIsFetching(vars, queryFilters): number;\n"})}),"\n",(0,i.jsx)(s.h2,{id:"mutation-hooks",children:"Mutation hooks"}),"\n",(0,i.jsx)(s.p,{children:"Each builder can be used for query or mutation. It's up to the developer to decide how to use it.\nThe underlying query/mutation functions are the same. Only the underlying Tanstack Query hooks, and options passed to them are different."}),"\n",(0,i.jsx)(s.h3,{id:"usemutation",children:"useMutation"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"useMutation(mutationOptions): UseMutationResult;\n"})}),"\n",(0,i.jsx)(s.h3,{id:"usemutationstate",children:"useMutationState"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"useMutationState(vars, mutationFilters, select): Mutation | SelectedState;\n"})}),"\n",(0,i.jsx)(s.h3,{id:"useismutating",children:"useIsMutating"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"useIsMutating(vars, mutationFilters): number;\n"})}),"\n",(0,i.jsx)(s.h2,{id:"utilities",children:"Utilities"}),"\n",(0,i.jsx)(s.p,{children:"There are some utility functions that are not hooks, but can be used for more advanced use cases, such as calling underlying Tanstack Query hooks directly."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"getQueryFn(operationType: 'query' | 'queries' | 'infiniteQuery'): QueryFn;\ngetQueryKeyHashFn(): QueryKeyHashFn;\ngetQueryKey(vars): QueryKey;\ngetQueryOptions(vars, queryOptions, operationType): QueryOptions;\ngetInfiniteQueryOptions(vars, paginataionOptions): InfiniteQueryOptions;\ngetMutationFn(queryClient, meta): MutationFn;\ngetMutationKey(): MutationKey;\ngetMutationOptions(queryClient, mutationOptions): MutationOptions;\ngetMutationFilters(vars, mutationFilters): MutationFilters;\n"})})]})}function c(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);