"use strict";(self.webpackChunktanstack_query_builder_website=self.webpackChunktanstack_query_builder_website||[]).push([[739],{3023:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>o});var n=i(3696);const a={},r=n.createContext(a);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(r.Provider,{value:t},e.children)}},6734:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"api/client","title":"Client API","description":"The Client API provides imperative methods, similar to how QueryClient and QueryCache can be used in Tanstack Query.","source":"@site/docs/api/client.mdx","sourceDirName":"api","slug":"/api/client","permalink":"/tanstack-query-builder/api/client","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"Client API","sidebar_position":10,"hide_table_of_contents":true},"sidebar":"tutorialSidebar","previous":{"title":"Query API","permalink":"/tanstack-query-builder/api/query"},"next":{"title":"Tags API","permalink":"/tanstack-query-builder/api/tags"}}');var a=i(2540),r=i(3023);const s={title:"Client API",sidebar_position:10,hide_table_of_contents:!0},o=void 0,c={},l=[];function d(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["The Client API provides imperative methods, similar to how QueryClient and QueryCache can be used in Tanstack Query.\nIt can be accessed via ",(0,a.jsx)(t.a,{href:"./builder#client",children:(0,a.jsx)(t.code,{children:"builder.client"})})," in the ",(0,a.jsx)(t.code,{children:"QueryBuilder"})," instance. Available methods are:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"ensureData(vars, queryOptions): Promise<Data>;\nensureInfiniteData(vars, paginationOptions): Promise<InfiniteData>;\nrefetch(vars, queryFilters, refetchOptions): Promise<void>;\nfetch(vars, queryOptions): Promise<Data>;\nfetchInfinite(vars, queryOptions): Promise<InfiniteData>;\nisFetching(vars, queryFilters): number;\nprefetch(vars, queryOptions): Promise<Data>;\nprefetchInfinite(vars, paginationOptions): Promise<InfiniteData>;\nreset(vars, queryFilters, resetOptions): Promise<void>;\nremove(vars, queryFilters): void;\ncancel(vars, queryFilters, cancelOptions): Promise<void>;\ninvalidate(vars, queryFilters, invalidateOptions): Promise<void>;\ngetData(vars, queryFilters): Data | undefined;\nsetData(vars, updater, setDataOptions): Data | undefined;\ngetState(vars): QueryState;\ngetMutation(vars, mutationFilters): Mutation;\nisMutating(vars, mutationFilters): number;\nmutate(vars, mutationOptions): Promise<Data>;\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The main use case for these methods is to manipulate the cache outside of React components.\nFor example, you can use ",(0,a.jsx)(t.code,{children:"ensureData"})," in a router before the route is loaded,\nto ensure that the data for a specific article is in the cache, and if not, fetch it from the server."]}),"\n",(0,a.jsxs)(t.p,{children:["Most of these methods correspond to the methods in ",(0,a.jsx)(t.a,{href:"https://tanstack.com/query/latest/docs/reference/QueryClient",children:(0,a.jsx)(t.code,{children:"QueryClient"})})," of Tanstack Query. For example, ",(0,a.jsx)(t.code,{children:"ensureData"})," is similar to ",(0,a.jsx)(t.code,{children:"ensureQueryData"}),", and ",(0,a.jsx)(t.code,{children:"refetch"})," is similar to ",(0,a.jsx)(t.code,{children:"refetchQueries"}),".\nThe main difference is that these methods are pre-populated with the variables in the builder, so you don't need to pass them again. For example, suppose we have a builder like this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'const articlesQuery = builder.withPath("/articles/:id").withData<ArticleData>();\n'})}),"\n",(0,a.jsx)(t.p,{children:"We can fetch the data for a specific article imperatively like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const article = await articlesQuery.client.fetch({ params: { id: 1 } });\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);